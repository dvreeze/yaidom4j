/*
 * Copyright 2024-2024 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This package and its subpackages contain support for code analysis in projects using Open Liberty
 * as the target platform. That is, support is offered for checking "configurations" across multiple
 * files. For example, in the Java code base of such a project there are injected resources with a
 * given name, and these resources are bound to environment variables in an Open Liberty server.xml
 * file (or related "server" files). It would be nice to see this connection from annotated Java source
 * code to for example environment variables in one overview, if we do not want to hop between files
 * to get an understanding of how annotations and configurations hang together.
 * <p>
 * So the idea is to be able to relate the contents of, say, a WAR file on the one hand to Open Liberty
 * configuration files on the other hand. The puzzle pieces needed for that are Java reflection to inspect
 * annotated (compiled) Java code (for annotations that have retention runtime, which is commonly the case
 * for the annotations we are interested in) and support for reading different known kinds of XML
 * configuration files, such as web.xml, beans.xml, ejb-jar.xml, server.xml etc. This XML dialect support
 * is of course something that yaidom4j can help with a lot, in a lightweight manner and with as much or
 * as little knowledge of the format as desired. Arguably, this is more lightweight than XML data binding.
 * Besides Java reflection (for introspecting compiled annotated code) and yaidom4j (for querying known
 * XML configuration files) we may need Java SE's support for reading ZIP/JAR files (after all, a WAR file
 * is a ZIP file). On the other hand, after a local Maven build of the project we'll find the WAR
 * contents somewhere under a target folder as an open directory structure.
 * <p>
 * This package and its subpackages contain the important puzzle pieces, namely yaidom4j-based querying
 * support for well-known configuration files (in projects using Open Liberty as target platform), and
 * some Java reflection support for querying annotations in compiled Java code.
 * <p>
 * Even without any sophistication such as support for resolving "variables" there is a lot we can get
 * from an overview generated by the puzzle pieces mentioned above. For example:
 * <ul>
 *     <li>Which environment variables need to be resolved for resources injected into Java code?</li>
 *     <li>Do we miss any binding (to an environment variable) for these injected resources?</li>
 *     <li>Do configuration files have the correct namespaces? It does not hurt to check this when migrating from Jakarta EE 8 to 10, for example.</li>
 *     <li>Do we have any superfluous configuration, such as unnecessary ejb-jar.xml content (where the existing corresponding annotations suffice)?</li>
 *     <li>Are all EJBs bound, for example in an ibm-ejb-jar-bnd.xml file, or in a server.xml file?</li>
 *     <li>Are EJBs not bound twice, for example in ibm-ejb-jar-bnd.xml files and server.xml files?</li>
 *     <li>Did we make any typo in FQCNs in XML configuration files?</li>
 *     <li>When migrating from Jakarta EE 8 to 10, did we erroneously replace "javax" by "jakarta" in "javax.sql.DataSource"?</li>
 *     <li>When modularizing the server XML configuration, do we by any chance instantiate JMS resource adapters twice instead of just once?</li>
 *     <li>In a WAR file, what resides under the WEB-INF directory and what resides under the META-INF directory, and is this correct?</li>
 *     <li>Does the web.xml file, if any, not duplicate any annotations in the code?</li>
 * </ul>
 * This can all start out as simple "querying" scripts, without turning anything into (for example) a Maven plugin yet.
 * The latter may or may not become desirable at some point, depending on to what extent such a plugin is
 * married to one particular setup of the Maven (multi-module) project structure.
 *
 * @author Chris de Vreeze
 */
package eu.cdevreeze.yaidom4j.examples.codeanalysis.openliberty;
